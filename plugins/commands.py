import os
import logging
import random
import asyncio
from Script import script
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import *
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db
from info import CHANNELS, ADMINS, AUTH_CHANNEL, LOG_CHANNEL, PICS, BATCH_FILE_CAPTION, CUSTOM_FILE_CAPTION, PROTECT_CONTENT, CHNL_LNK, GRP_LNK, REQST_CHANNEL, SUPPORT_CHAT_ID, SUPPORT_CHAT, MAX_B_TN, VERIFY, SHORTLINK_API, SHORTLINK_URL, TUTORIAL, IS_TUTORIAL, PREMIUM_USER
from utils import get_settings, get_size, is_subscribed, save_group_settings, temp, verify_user, check_token, check_verification, get_token, get_shortlink, get_tutorial
from database.connections_mdb import active_connection
# from plugins.pm_filter import ENABLE_SHORTLINK
import re, asyncio, os, sys
import json
import base64
logger = logging.getLogger(__name__)

BATCH_FILES = {}

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [[
                    InlineKeyboardButton('‚§¨ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚§¨', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚úá ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚úá', url=CHNL_LNK)
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.START_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup, disable_web_page_preview=True)
        await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
                    InlineKeyboardButton('‚§¨ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚§¨', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('„ÄÑ H·¥á ü·¥ò „ÄÑ', callback_data='help'),
                    InlineKeyboardButton('‚çü A ô·¥è·¥ú·¥õ ‚çü', callback_data='about')
                ],[
                    InlineKeyboardButton('‚úá ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚úá', url=CHNL_LNK)
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        m=await message.reply_sticker("CAACAgIAAxkBAAEKDU1k3hdblAMuXWkapN9YbcsWdhHKXAAC_g4AAudvIEnxNZjTX_WA2DAE") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    if AUTH_CHANNEL and not await is_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL))
        except ChatAdminRequired:
            logger.error("·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á  ô·¥è·¥õ …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ “ì·¥è Ä·¥Ñ·¥ás·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
            return
        btn = [
            [
                InlineKeyboardButton(
                    "‚ùÜ ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚ùÜ", url=invite_link.invite_link
                )
            ]
        ]

        if message.command[1] != "subscribe":
            try:
                kk, file_id = message.command[1].split("_", 1)
                pre = 'checksubp' if kk == 'filep' else 'checksub' 
                btn.append([InlineKeyboardButton("‚Üª ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Üª", callback_data=f"{pre}#{file_id}")])
            except (IndexError, ValueError):
                btn.append([InlineKeyboardButton("‚Üª ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Üª", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
        await client.send_message(
            chat_id=message.from_user.id,
            text="**·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è …¢·¥á·¥õ “ì…™ ü·¥ás\n\n·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥**",
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.MARKDOWN
            )
        return
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
                    InlineKeyboardButton('‚§¨ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚§¨', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('„ÄÑ H·¥á ü·¥ò „ÄÑ', callback_data='help'),
                    InlineKeyboardButton('‚çü A ô·¥è·¥ú·¥õ ‚çü', callback_data='about')
                ],[
                    InlineKeyboardButton('‚úá ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚úá', url=CHNL_LNK)
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)      
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    data = message.command[1]
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""
    if data.split("-", 1)[0] == "BATCH":
        sts = await message.reply("<b>Please wait...</b>")
        file_id = data.split("-", 1)[1]
        msgs = BATCH_FILES.get(file_id)
        if not msgs:
            file = await client.download_media(file_id)
            try: 
                with open(file) as file_data:
                    msgs=json.loads(file_data.read())
            except:
                await sts.edit("FAILED")
                return await client.send_message(LOG_CHANNEL, "UNABLE TO OPEN FILE.")
            os.remove(file)
            BATCH_FILES[file_id] = msgs
        for msg in msgs:
            title = msg.get("title")
            size=get_size(int(msg.get("size", 0)))
            f_caption=msg.get("caption", "")
            if BATCH_FILE_CAPTION:
                try:
                    f_caption=BATCH_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{title}"
            try:
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                )
            except FloodWait as e:
                await asyncio.sleep(e.x)
                logger.warning(f"Floodwait of {e.x} sec.")
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                )
            except Exception as e:
                logger.warning(e, exc_info=True)
                continue
            await asyncio.sleep(1) 
        await sts.delete()
        return
    
    elif data.split("-", 1)[0] == "DSTORE":
        sts = await message.reply("<b>Please wait...</b>")
        b_string = data.split("-", 1)[1]
        decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
        try:
            f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
        except:
            f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
            protect = "/pbatch" if PROTECT_CONTENT else "batch"
        diff = int(l_msg_id) - int(f_msg_id)
        async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
            if msg.media:
                media = getattr(msg, msg.media.value)
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                    except Exception as e:
                        logger.exception(e)
                        f_caption = getattr(msg, 'caption', '')
                else:
                    media = getattr(msg, msg.media.value)
                    file_name = getattr(media, 'file_name', '')
                    f_caption = getattr(msg, 'caption', file_name)
                try:
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            elif msg.empty:
                continue
            else:
                try:
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            await asyncio.sleep(1) 
        return await sts.delete()

    elif data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2]
        if str(message.from_user.id) != str(userid):
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
        is_valid = await check_token(client, userid, token)
        if is_valid == True:
            await message.reply_text(
                text=f"<b> ú·¥á è {message.from_user.mention},  è·¥è·¥ú ·¥Ä Ä·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥†·¥á Ä…™“ì…™·¥á·¥Ö !\n…¥·¥è·¥°  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä ·¥Ä ü ü ·¥ç·¥è·¥†…™·¥ás ·¥õ…™ ü ü ·¥õ·¥è·¥Ö·¥Ä è ·¥ç…™·¥Ö…¥…™…¢ ú·¥õ.</b>",
                protect_content=True
            )
            await verify_user(client, userid, token)
        else:
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
    if data.startswith("sendfiles"):
        chat_id = int("-" + file_id.split("-")[1])
        userid = message.from_user.id if message.from_user else None
        st = await client.get_chat_member(chat_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
        ):
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}", True)
        else:
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}", False)
        k = await client.send_message(chat_id=message.from_user.id,text=f"<b>…¢·¥á·¥õ ·¥Ä ü ü “ì…™ ü·¥ás …™…¥ ·¥Ä s…™…¥…¢ ü·¥á ·¥Ñ ü…™·¥Ñ·¥ã!!!\n\nüìÇ  ü…™…¥·¥ã ‚û† : {g}\n\n<i>…¥·¥è·¥õ·¥á: ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ ùüª ·¥ç…™…¥s ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õs. s·¥Ä·¥†·¥á ·¥õ ú·¥á  ü…™…¥·¥ã ·¥õ·¥è s·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üs·¥á</i></b>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÇ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö …¥·¥è·¥° üìÇ', url=g)
                    ], [
                        InlineKeyboardButton('‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ÅâÔ∏è', url=await get_tutorial(chat_id))
                    ]
                ]
            )
        )
        await asyncio.sleep(600)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!</b>")
        return
        
    
    elif data.startswith("short"):
        user = message.from_user.id
        chat_id = temp.SHORT.get(user)
        files_ = await get_file_details(file_id)
        files = files_[0]
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
        k = await client.send_message(chat_id=user,text=f"<b>üìïN·¥Ä·¥ç·¥á ‚û† : <code>{files.file_name}</code> \n\nüîóS…™·¥¢·¥á ‚û† : {get_size(files.file_size)}\n\nüìÇF…™ ü·¥á  ü…™…¥·¥ã ‚û† : {g}\n\n<i>…¥·¥è·¥õ·¥á: ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ ùü∏ùü∂ ·¥ç…™…¥s ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õs. s·¥Ä·¥†·¥á ·¥õ ú·¥á  ü…™…¥·¥ã ·¥õ·¥è s·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üs·¥á</i></b>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÇ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö …¥·¥è·¥° üìÇ', url=g)
                    ], [
                        InlineKeyboardButton('‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ÅâÔ∏è', url=await get_tutorial(chat_id))
                    ]
                ]
            )
        )
        await asyncio.sleep(1200)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!</b>")
        return
        
    elif data.startswith("all"):
        files = temp.GETALL.get(file_id)
        if not files:
            return await message.reply('<b>…¥·¥è s·¥ú·¥Ñ ú “ì…™ ü·¥á ·¥áx…™s·¥õ.</b>')
        filesarr = []
        for file in files:
            file_id = file.file_id
            files_ = await get_file_details(file_id)
            files1 = files_[0]
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))
            size=get_size(files1.file_size)
            f_caption=files1.caption
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{''.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))}"
            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("Verify", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ]]
                await message.reply_text(
                    text="<b>You are not verified !\nKindly verify to continue !</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                caption=f_caption,
                protect_content=True if pre == 'filep' else False,
            )
            filesarr.append(msg)
        k = await client.send_message(chat_id = message.from_user.id, text=f"<b>·¥Ä ô·¥è·¥†·¥á “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <u>10 MINS</u>\n·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™ss·¥ú·¥ás.\n\n·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ ü·¥á ·¥õ·¥è  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ  è·¥è·¥ú Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á Ä·¥á</b>")
        await asyncio.sleep(600)
        for x in filesarr:
            await x.delete()
        await k.edit_text("<b> è·¥è·¥ú Ä “ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!</b>")
        return    
        
    elif data.startswith("files"):
        user = message.from_user.id
        if temp.SHORT.get(user)==None:
            await message.reply_text(text="<b>Please Search Again in Group</b>")
        else:
            chat_id = temp.SHORT.get(user)
        settings = await get_settings(chat_id)
        if settings['is_shortlink'] and user not in PREMIUM_USER:
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=message.from_user.id,text=f"<b>üìïN·¥Ä·¥ç·¥á ‚û† : <code>{files.file_name}</code> \n\nüîóS…™·¥¢·¥á ‚û† : {get_size(files.file_size)}\n\nüìÇF…™ ü·¥á  ü…™…¥·¥ã ‚û† : {g}\n\n<i>…¥·¥è·¥õ·¥á: ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á …™s ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ ùü∏ùü∂ ·¥ç…™…¥s ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õs. s·¥Ä·¥†·¥á ·¥õ ú·¥á  ü…™…¥·¥ã ·¥õ·¥è s·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üs·¥á</i></b>", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÇ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö …¥·¥è·¥° üìÇ', url=g)
                        ], [
                            InlineKeyboardButton('‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ÅâÔ∏è', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            await asyncio.sleep(1200)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!</b>")
            return
    user = message.from_user.id
    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("Verify", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ]]
                await message.reply_text(
                    text="<b>You are not verified !\nKindly verify to continue !</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
            )
            filetype = msg.media
            file = getattr(msg, filetype.value)
            title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), file.file_name.split()))
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            btn = [[
                InlineKeyboardButton("üîÑ …¢·¥á·¥õ “ì…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ üîÑ", callback_data=f'delfile#{file_id}')
            ]]
            k = await msg.reply("<b>·¥Ä ô·¥è·¥†·¥á “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <u>10 MINS</u>\n·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™ss·¥ú·¥ás.\n\n·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ ü·¥á ·¥õ·¥è  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ  è·¥è·¥ú Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á Ä·¥á</b>",quote=True)
            await asyncio.sleep(600)
            await msg.delete()
            await k.edit_text("<b> è·¥è·¥ú Ä “ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
            return
        except:
            pass
        return await message.reply('…¥·¥è s·¥ú·¥Ñ ú “ì…™ ü·¥á ·¥áx…™s·¥õ.')
    files = files_[0]
    title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))
    size=get_size(files.file_size)
    f_caption=files.caption
    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption=f_caption
    if f_caption is None:
        f_caption = f"@Teamrioupdates  {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))}"
    if not await check_verification(client, message.from_user.id) and VERIFY == True:
        btn = [[
            InlineKeyboardButton("Verify", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
        ]]
        await message.reply_text(
            text="<b>You are not verified !\nKindly verify to continue !</b>",
            protect_content=True,
            reply_markup=InlineKeyboardMarkup(btn)
        )
        return
    msg = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=True if pre == 'filep' else False,
    )
    btn = [[
        InlineKeyboardButton("üîÑ …¢·¥á·¥õ “ì…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ üîÑ", callback_data=f'delfile#{file_id}')
    ]]
    k = await msg.reply("<b>·¥Ä ô·¥è·¥†·¥á “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <u>10 MINS</u>\n·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™ss·¥ú·¥ás.\n\n·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ ü·¥á ·¥õ·¥è  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ  è·¥è·¥ú Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á Ä·¥á</b>",quote=True)
    await asyncio.sleep(600)
    await msg.delete()
    await k.edit_text("<b> è·¥è·¥ú Ä “ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!!!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
    return   

@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("Unexpected type of CHANNELS")

    text = 'üìë **Indexed channels/groups**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**Total:** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('TelegramBot.log')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete(bot, message):
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...‚è≥", quote=True)
    else:
        await message.reply(' Ä·¥á·¥ò ü è ·¥õ·¥è “ì…™ ü·¥á ·¥°…™·¥õ ú /delete ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', quote=True)
        return

    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('·¥õ ú…™s …™s …¥·¥è·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö “ì…™ ü·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)

    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('“ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('“ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
        else:
            # files indexed before https://github.com/EvamariaTG/EvaMaria/commit/f3d2a1bcb155faf44178e5d7a685a1b533e714bf#diff-86b613edf1748372103e94cacff3b578b36b698ef9c16817bb98fe9ef22fb669R39 
            # have original file name.
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('“ì…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
            else:
                await msg.edit('“ì…™ ü·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')


@Client.on_message(filters.command('deleteall') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    await message.reply_text(
        '·¥õ ú…™s ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü …™…¥·¥Ö·¥áx·¥á·¥Ö “ì…™ ü·¥ás.\…¥·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á??',
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text=" è·¥ás", callback_data="autofilter_delete"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="close_data"
                    )
                ],
            ]
        ),
        quote=True,
    )


@Client.on_callback_query(filters.regex(r'^autofilter_delete'))
async def delete_all_index_confirm(bot, message):
    await Media.collection.drop()
    await message.answer('·¥ò…™ Ä·¥Ä·¥Ñ è …™s ·¥Ñ Ä…™·¥ç·¥á')
    await message.message.edit('s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä ü ü ·¥õ ú·¥á …™…¥·¥Ö·¥áx·¥á·¥Ö “ì…™ ü·¥ás.')


@Client.on_message(filters.command('settings'))
async def settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥ús·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò!!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs!", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return
    
    settings = await get_settings(grp_id)

    try:
        if settings['max_btn']:
            settings = await get_settings(grp_id)
    except KeyError:
        await save_group_settings(grp_id, 'max_btn', False)
        settings = await get_settings(grp_id)
    if 'is_shortlink' not in settings.keys():
        await save_group_settings(grp_id, 'is_shortlink', False)
    else:
        pass

    if settings is not None:
        buttons = [
            [
                InlineKeyboardButton(
                    ' Ä·¥ás·¥ú ü·¥õ ·¥ò·¥Ä…¢·¥á',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    ' ô·¥ú·¥õ·¥õ·¥è…¥' if settings["button"] else '·¥õ·¥áx·¥õ',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '“ì…™ ü·¥á s·¥á…¥·¥Ö ·¥ç·¥è·¥Ö·¥á',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '·¥ç·¥Ä…¥·¥ú·¥Ä ü s·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else '·¥Ä·¥ú·¥õ·¥è s·¥á…¥·¥Ö',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["file_secure"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '…™·¥ç·¥Ö ô',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["imdb"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    's·¥ò·¥á ü ü ·¥Ñ ú·¥á·¥Ñ·¥ã',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["spell_check"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥çs…¢',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["welcome"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'ùü∑ùü∂ ·¥ç…™…¥s' if settings["auto_delete"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥Ä·¥ú·¥õ·¥è “ì…™ ü·¥õ·¥á Ä',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["auto_ffilter"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    '·¥ç·¥Äx  ô·¥ú·¥õ·¥õ·¥è…¥s',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'ùü∑ùü∂' if settings["max_btn"] else f'{MAX_B_TN}',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    's ú·¥è Ä·¥õ ü…™…¥·¥ã',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî ·¥è…¥' if settings["is_shortlink"] else '‚úò ·¥è“ì“ì',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
            ],
        ]

        btn = [[
                InlineKeyboardButton("·¥è·¥ò·¥á…¥  ú·¥á Ä·¥á ‚Üì", callback_data=f"opnsetgrp#{grp_id}"),
                InlineKeyboardButton("·¥è·¥ò·¥á…¥ …™…¥ ·¥ò·¥ç ‚á≤", callback_data=f"opnsetpm#{grp_id}")
              ]]

        reply_markup = InlineKeyboardMarkup(buttons)
        if chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            await message.reply_text(
                text="<b>·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è·¥è ·¥è·¥ò·¥á…¥ s·¥á·¥õ·¥õ…™…¥…¢s  ú·¥á Ä·¥á ?</b>",
                reply_markup=InlineKeyboardMarkup(btn),
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )
        else:
            await message.reply_text(
                text=f"<b>·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä {title} ·¥Äs  è·¥è·¥ú Ä ·¥°…™s ú</b>",
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )



@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    sts = await message.reply("·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á")
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥ús·¥á /connect {message.chat.id} …™…¥ ·¥ò·¥ç")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á …™'·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò!!", quote=True)
                return
        else:
            await message.reply_text("…™'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs!", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return

    if len(message.command) < 2:
        return await sts.edit("No Input!!")
    template = message.text.split(" ", 1)[1]
    await save_group_settings(grp_id, 'template', template)
    await sts.edit(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á “ì·¥è Ä {title} ·¥õ·¥è\n\n{template}")


@Client.on_message((filters.command(["request", "Request"]) | filters.regex("#request") | filters.regex("#Request")) & filters.group)
async def requests(bot, message):
    if REQST_CHANNEL is None or SUPPORT_CHAT_ID is None: return # Must add REQST_CHANNEL and SUPPORT_CHAT_ID to use this feature
    if message.reply_to_message and SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.reply_to_message.text
        try:
            if REQST_CHANNEL is not None:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('s ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥s', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>ùñ±ùñæùóâùóàùóãùóçùñæùóã : {mention} ({reporter})\n\nùñ¨ùñæùóåùóåùñ∫ùóÄùñæ : {content}</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ', url=f"{message.reply_to_message.link}"),
                        InlineKeyboardButton('s ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥s', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>ùñ±ùñæùóâùóàùóãùóçùñæùóã : {mention} ({reporter})\n\nùñ¨ùñæùóåùóåùñ∫ùóÄùñæ : {content}</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç ùüπ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs].  Ä·¥á«´·¥ú·¥ás·¥õs ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass
        
    elif SUPPORT_CHAT_ID == message.chat.id:
        chat_id = message.chat.id
        reporter = str(message.from_user.id)
        mention = message.from_user.mention
        success = True
        content = message.text
        keywords = ["#request", "/request", "#Request", "/Request"]
        for keyword in keywords:
            if keyword in content:
                content = content.replace(keyword, "")
        try:
            if REQST_CHANNEL is not None and len(content) >= 3:
                btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('s ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥s', callback_data=f'show_option#{reporter}')
                      ]]
                reported_post = await bot.send_message(chat_id=REQST_CHANNEL, text=f"<b>ùñ±ùñæùóâùóàùóãùóçùñæùóã : {mention} ({reporter})\n\nùñ¨ùñæùóåùóåùñ∫ùóÄùñæ : {content}</b>", reply_markup=InlineKeyboardMarkup(btn))
                success = True
            elif len(content) >= 3:
                for admin in ADMINS:
                    btn = [[
                        InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ', url=f"{message.link}"),
                        InlineKeyboardButton('s ú·¥è·¥° ·¥è·¥ò·¥õ…™·¥è…¥s', callback_data=f'show_option#{reporter}')
                      ]]
                    reported_post = await bot.send_message(chat_id=admin, text=f"<b>ùñ±ùñæùóâùóàùóãùóçùñæùóã : {mention} ({reporter})\n\nùñ¨ùñæùóåùóåùñ∫ùóÄùñæ : {content}</b>", reply_markup=InlineKeyboardMarkup(btn))
                    success = True
            else:
                if len(content) < 3:
                    await message.reply_text("<b> è·¥è·¥ú ·¥ç·¥ús·¥õ ·¥õ è·¥ò·¥á ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ [·¥ç…™…¥…™·¥ç·¥ú·¥ç ùüπ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs].  Ä·¥á«´·¥ú·¥ás·¥õs ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥á·¥ç·¥ò·¥õ è.</b>")
            if len(content) < 3:
                success = False
        except Exception as e:
            await message.reply_text(f"Error: {e}")
            pass

    else:
        success = False
    
    if success:
        '''if isinstance(REQST_CHANNEL, (int, str)):
            channels = [REQST_CHANNEL]
        elif isinstance(REQST_CHANNEL, list):
            channels = REQST_CHANNEL
        for channel in channels:
            chat = await bot.get_chat(channel)
        #chat = int(chat)'''
        link = await bot.create_chat_invite_link(int(REQST_CHANNEL))
        btn = [[
                InlineKeyboardButton('·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url=link.invite_link),
                InlineKeyboardButton('·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ', url=f"{reported_post.link}")
              ]]
        await message.reply_text("<b> è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ “ì·¥è Ä s·¥è·¥ç·¥á ·¥õ…™·¥ç·¥á.\n\n·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ & ·¥†…™·¥á·¥°  Ä·¥á«´·¥ú·¥ás·¥õ</b>", reply_markup=InlineKeyboardMarkup(btn))
    
@Client.on_message(filters.command("send") & filters.user(ADMINS))
async def send_msg(bot, message):
    if message.reply_to_message:
        target_id = message.text.split(" ", 1)[1]
        out = "Users Saved In DB Are:\n\n"
        success = False
        try:
            user = await bot.get_users(target_id)
            users = await db.get_all_users()
            async for usr in users:
                out += f"{usr['id']}"
                out += '\n'
            if str(user.id) in str(out):
                await message.reply_to_message.copy(int(user.id))
                success = True
            else:
                success = False
            if success:
                await message.reply_text(f"<b> è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs  ô·¥á·¥á…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á…¥·¥Ö ·¥õ·¥è {user.mention}.</b>")
            else:
                await message.reply_text("<b>·¥õ ú…™s ·¥ús·¥á Ä ·¥Ö…™·¥Ö…¥'·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™s  ô·¥è·¥õ  è·¥á·¥õ !</b>")
        except Exception as e:
            await message.reply_text(f"<b>Error: {e}</b>")
    else:
        await message.reply_text("<b>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Äs ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥ús…™…¥…¢ ·¥õ ú·¥á ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö. “ì·¥è Ä ·¥á…¢: /send userid</b>")

@Client.on_message(filters.command("deletefiles") & filters.user(ADMINS))
async def deletemultiplefiles(bot, message):
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>Hey {message.from_user.mention}, ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è…¥'·¥õ ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òs. …™·¥õ ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs ·¥è…¥ ·¥ç è ·¥ò·¥ç !</b>")
    else:
        pass
    try:
        keyword = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, …¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ã·¥á è·¥°·¥è Ä·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á “ì…™ ü·¥ás.</b>")
    k = await bot.send_message(chat_id=message.chat.id, text=f"<b>“ì·¥á·¥õ·¥Ñ ú…™…¥…¢ “ì…™ ü·¥ás “ì·¥è Ä  è·¥è·¥ú Ä «´·¥ú·¥á Ä è {keyword} ·¥è…¥ ·¥Ö ô... ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
    files, total = await get_bad_files(keyword)
    await k.delete()
    #await k.edit_text(f"<b>Found {total} files for your query {keyword} !\n\nFile deletion process will start in 5 seconds !</b>")
    #await asyncio.sleep(5)
    btn = [[
       InlineKeyboardButton(" è·¥ás, ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á !", callback_data=f"killfilesdq#{keyword}")
       ],[
       InlineKeyboardButton("…¥·¥è, ·¥Ä ô·¥è Ä·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ !", callback_data="close_data")
    ]]
    await message.reply_text(
        text=f"<b>“ì·¥è·¥ú…¥·¥Ö {total} “ì…™ ü·¥ás “ì·¥è Ä  è·¥è·¥ú Ä «´·¥ú·¥á Ä è {keyword} !\n\n·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á?</b>",
        reply_markup=InlineKeyboardMarkup(btn),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("shortlink"))
async def shortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥õ·¥ú Ä…¥ ·¥è“ì“ì ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs !\n\n<u>“ì·¥è ü ü·¥è·¥° ·¥õ ú·¥ás·¥á s·¥õ·¥á·¥òs ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ s ú·¥è Ä·¥õ·¥á…¥·¥á Ä:</u>\n\nùü∑. ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú “ì·¥ú ü ü ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs\n\nùü∏. ·¥Ä“ì·¥õ·¥á Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ …™…¥ …¢ Ä·¥ò, s·¥á·¥õ  è·¥è·¥ú Ä s ú·¥è Ä·¥õ·¥á…¥·¥á Ä\n\ns·¥á…¥·¥Ö ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò\n\n‚Äî> /shortlink ""{ è·¥è·¥ú Ä_s ú·¥è Ä·¥õ·¥á…¥·¥á Ä_·¥°·¥á ôs…™·¥õ·¥á_…¥·¥Ä·¥ç·¥á} { è·¥è·¥ú Ä_s ú·¥è Ä·¥õ·¥á…¥·¥á Ä_·¥Ä·¥ò…™}\n\n#s·¥Ä·¥ç·¥ò ü·¥á:-\n/shortlink mplaylink.com 1f1da5c9df9a58058672ac8d8134e203b03426a1\n\n·¥õ ú·¥Ä·¥õ's …™·¥õ!!! ·¥á…¥·¥ä·¥è è ·¥á·¥Ä Ä…¥…™…¥…¢ ·¥ç·¥è…¥·¥á è üí≤</b>")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b> è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!\n\n·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö\n\n“ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥ò·¥ç ·¥ç·¥á ·¥°…™·¥õ ú ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö</b>")
    else:
        pass
    try:
        command, shortlink_url, api = data.split(" ")
    except:
        return await message.reply_text("<b>·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á :(\n\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä s ú·¥è Ä·¥õ·¥á…¥·¥á Ä ·¥°·¥á ôs…™·¥õ·¥á  ü…™…¥·¥ã ·¥Ä…¥·¥Ö ·¥Ä·¥ò…™ ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !\n\n“ì·¥è Ä·¥ç·¥Ä·¥õ: <code>/shortlink mplaylink.com 1f1da5c9df9a58058672ac8d8134e203b03426a1</code></b>")
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
    shortlink_url = re.sub(r"https?://?", "", shortlink_url)
    shortlink_url = re.sub(r"[:/]", "", shortlink_url)
    await save_group_settings(grpid, 'shortlink', shortlink_url)
    await save_group_settings(grpid, 'shortlink_api', api)
    await save_group_settings(grpid, 'is_shortlink', True)
    await reply.edit_text(f"<b>s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ “ì·¥è Ä {title}.\n\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôs…™·¥õ·¥á: <code>{shortlink_url}</code>\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ä·¥ò…™: <code>{api}</code></b>")
    
@Client.on_message(filters.command("setshortlinkoff") & filters.user(ADMINS))
async def offshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("…™ ·¥°…™ ü ü ·¥°·¥è Ä·¥ã ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥ò")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', False)
    # ENABLE_SHORTLINK = False
    return await message.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã")
    
@Client.on_message(filters.command("setshortlinkon") & filters.user(ADMINS))
async def onshortlink(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("…™ ·¥°…™ ü ü ·¥°·¥è Ä·¥ã ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥ò")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    await save_group_settings(grpid, 'is_shortlink', True)
    # ENABLE_SHORTLINK = True
    return await message.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã")

@Client.on_message(filters.command("shortlink_info"))
async def showshortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥õ·¥ú Ä…¥ ·¥è“ì“ì ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥ò\n\n·¥õ Ä è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥ò, …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á ·¥ús…™…¥…¢ ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò</b>")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    chat_id=message.chat.id
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
#     if 'shortlink' in settings.keys():
#         su = settings['shortlink']
#         sa = settings['shortlink_api']
#     else:
#         return await message.reply_text("<b>Shortener Url Not Connected\n\nYou can Connect Using /shortlink command</b>")
#     if 'tutorial' in settings.keys():
#         st = settings['tutorial']
#     else:
#         return await message.reply_text("<b>Tutorial Link Not Connected\n\nYou can Connect Using /set_tutorial command</b>")
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö W·¥è Ä·¥ãs O…¥ ü è F·¥è Ä ·¥õ ú…™s G Ä·¥è·¥ú·¥ò O·¥°…¥·¥á Ä/A·¥Ö·¥ç…™…¥\n\nT Ä è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä O·¥°…¥ G Ä·¥è·¥ú·¥ò, I“ì Y·¥è·¥ú A Ä·¥á Us…™…¥…¢ M·¥á I…¥ Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò</b>")
    else:
        settings = await get_settings(chat_id) #fetching settings for group
        if 'shortlink' in settings.keys() and 'tutorial' in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            st = settings['tutorial']
            return await message.reply_text(f"<b>s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôs…™·¥õ·¥á: <code>{su}</code>\n\n·¥Ä·¥ò…™: <code>{sa}</code>\n\n·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü: <code>{st}</code></b>")
        elif 'shortlink' in settings.keys() and 'tutorial' not in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            return await message.reply_text(f"<b>s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôs…™·¥õ·¥á: <code>{su}</code>\n\n·¥Ä·¥ò…™: <code>{sa}</code>\n\n·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥ús…™…¥…¢ /set_tutorial command</b>")
        elif 'shortlink' not in settings.keys() and 'tutorial' in settings.keys():
            st = settings['tutorial']
            return await message.reply_text(f"<b>·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü: <code>{st}</code>\n\ns ú·¥è Ä·¥õ·¥á…¥·¥á Ä ·¥ú Ä ü …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥ús…™…¥…¢ /shortlink command</b>")
        else:
            return await message.reply_text("s ú·¥è Ä·¥õ·¥á…¥·¥á Ä ·¥ú Ä ü ·¥Ä…¥·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös, /shortlink ·¥Ä…¥·¥Ö /set_tutorial")


@Client.on_message(filters.command("set_tutorial"))
async def settutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. ·¥õ·¥ú Ä…¥ ·¥è“ì“ì ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ã ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥ò\n\n·¥õ Ä è …™·¥õ …™…¥  è·¥è·¥ú Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥ò")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return
    else:
        pass
    if len(message.command) == 1:
        return await message.reply("<b>…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö\n\n·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ús·¥Ä…¢·¥á: /set_tutorial  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã</b>")
    elif len(message.command) == 2:
        reply = await message.reply_text("<b>·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
        tutorial = message.command[1]
        await save_group_settings(grpid, 'tutorial', tutorial)
        await save_group_settings(grpid, 'is_tutorial', True)
        await reply.edit_text(f"<b>s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü\n\n ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã “ì·¥è Ä  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò {title} - <code>{tutorial}</code></b>")
    else:
        return await message.reply("<b> è·¥è·¥ú ·¥á…¥·¥õ·¥á Ä·¥á·¥Ö …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ “ì·¥è Ä·¥ç·¥Ä·¥õ\n\n“ì·¥è Ä·¥ç·¥Ä·¥õ: /set_tutorial  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã</b>")
        
@Client.on_message(filters.command("restart") & filters.user(ADMINS))
async def stop_button(bot, message):
    msg = await bot.send_message(text="**üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss·¥ás s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö.  ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ üîÑ**", chat_id=message.chat.id)       
    await asyncio.sleep(3)
    await msg.edit("**‚úÖÔ∏è  ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö.…¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á ‚úÖÔ∏è**")
    os.execl(sys.executable, sys.executable, *sys.argv)
